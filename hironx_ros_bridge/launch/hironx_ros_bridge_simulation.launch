<launch>
  <arg name="GUI" default="true" />
  <arg name="corbaport" default="15005" />
  <arg name="MODEL_FILE" default="$(find hironx_ros_bridge)/models/kawada-hironx.dae" />
  <arg name="CONF_FILE" default="$(find hironx_ros_bridge)/conf/kawada-hironx.conf" />
  <arg name="CONF_FILE_COLLISIONDETECT" default="$(find hironx_ros_bridge)/conf/kawada-hironx.conf" />
  <arg name="DEBUG_HRPSYS" default="false" />
  <arg name="USE_COLLISIONCHECK" default="true" /> <!-- enable collision rtc on simulation -->

  <!-- Set model file to parameter server  -->
  <param name="hironx/collada_model_filepath" value="$(arg MODEL_FILE)" />

  <include file="$(find hironx_ros_bridge)/launch/hironx_startup.launch" >
    <arg name="GUI" default="$(arg GUI)" />
    <arg name="MODEL_FILE" value="$(arg MODEL_FILE)" />
    <arg name="corbaport" default="$(arg corbaport)" />
    <arg name="CONF_FILE" value="$(arg CONF_FILE)" />    
    <arg name="DEBUG_HRPSYS" value="$(arg DEBUG_HRPSYS)" />
    <arg name="USE_COLLISIONCHECK" default="$(arg USE_COLLISIONCHECK)" />
  </include>
  <include file="$(find hironx_ros_bridge)/launch/hironx_ros_bridge.launch" >
    <arg name="nameserver" value="localhost" />
    <arg name="MODEL_FILE" value="$(arg MODEL_FILE)" />
    <arg name="SIMULATOR_NAME" value="HiroNX(Robot)0" />
    <arg name="corbaport" default="$(arg corbaport)" />
    <arg name="CONF_FILE_COLLISIONDETECT" value="$(arg CONF_FILE_COLLISIONDETECT)" />
    <arg name="USE_COLLISIONCHECK" default="$(arg USE_COLLISIONCHECK)" />
    <arg name="open_rqt_gui" default="false" />
  </include>

  <!-- camera image -->
  <node name="rtmlaunch_hironx_ros_bridge_simulation" pkg="openrtm_tools" type="rtmlaunch.py" args="$(find hironx_ros_bridge)/launch/hironx_ros_bridge_simulation.launch" output="screen" />
  <arg name="openrtm_args" default='-o "corba.nameservers:localhost:$(arg corbaport)" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.type:PeriodicExecutionContext" -o "exec_cxt.periodic.rate:100" -o "logger.file_name:/tmp/rtc%p.log"' />
  <node pkg="hrpsys_ros_bridge" name="ImageSensorROSBridge_HeadRight" type="ImageSensorROSBridge"
        args="$(arg openrtm_args)" ns="right" >
    <param name="frame_id" value="/CAMERA_HEAD_R" />
  </node>
  <node pkg="hrpsys_ros_bridge" name="ImageSensorROSBridge_HeadLeft" type="ImageSensorROSBridge"
        args="$(arg openrtm_args)" ns="left" >
    <param name="frame_id" value="/CAMERA_HEAD_L" />
  </node>
  <node pkg="hrpsys_ros_bridge" name="ImageSensorROSBridge_HandRight" type="ImageSensorROSBridge"
        args="$(arg openrtm_args)" ns="right" >
    <param name="frame_id" value="/CAMERA_HAND_R" />
  </node>
  <node pkg="hrpsys_ros_bridge" name="ImageSensorROSBridge_HandLeft" type="ImageSensorROSBridge"
        args="$(arg openrtm_args)" ns="left" >
    <param name="frame_id" value="/CAMERA_HAND_L" />
  </node>
  <rtconnect from="HiroNX(Robot)0.rtc:CAMERA_HEAD_R" to="ImageSensorROSBridge_HeadRight.rtc:timedImage" />
  <rtconnect from="HiroNX(Robot)0.rtc:CAMERA_HEAD_L" to="ImageSensorROSBridge_HeadLeft.rtc:timedImage" />
  <rtconnect from="HiroNX(Robot)0.rtc:CAMERA_HAND_R" to="ImageSensorROSBridge_HandRight.rtc:timedImage" />
  <rtconnect from="HiroNX(Robot)0.rtc:CAMERA_HAND_L" to="ImageSensorROSBridge_HandLeft.rtc:timedImage" />
  <rtactivate component="ImageSensorROSBridge_HeadRight.rtc" />
  <rtactivate component="ImageSensorROSBridge_HeadLeft.rtc" />
  <rtactivate component="ImageSensorROSBridge_HandRight.rtc" />
  <rtactivate component="ImageSensorROSBridge_HandLeft.rtc" />
</launch>
